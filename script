library(matrixStats)
library(dplyr)
library(timeSeries)
library(StatMatch)
library(FNN)
library(diffusionMap)
library(rARPACK)
library(leaps)
library(energy)
library(pracma)
library(rowr)


currencies <- read.csv(file = "currencies.csv", header = TRUE)
commodities <- read.csv(file = "commodities.csv", header = TRUE)
complete <- merge(currencies, commodities, by='Date', sort = FALSE)
complete <- complete[complete.cases(complete),]
currencies <- complete[,2:ncol(currencies)]
commodities <- complete[,(ncol(currencies)+3):ncol(complete)]





# Linear Regression
nrDays<-nrow(complete)
table<-NULL
windowdata<- complete[,-1] #getting rid of date column 
complete_dropdates<-windowdata
estimated_values <- data.frame(matrix(nrow = (nrDays-101), ncol = 0))

###########

## LINEAR REGRESSION BY CORRELATIONS

###########

for(j in 1:1){
  
  estimate <- data.frame()

  for(d in 101:(nrDays-1)){
    
    response <- complete_dropdates[,j]
    predict <- complete_dropdates[,]
    response <- response[(d-100):(d-1)]
    predict <- predict[(d-99):d,]
    
    correlation <- cor(as.matrix(complete_dropdates), method = "pearson")
    diag(correlation) <- 0
    abs_correlation <- abs(correlation)
    
    y <- sort(abs_correlation[,j], decreasing = TRUE)[1:10]
    pos <- which(abs_correlation[,j] %in% y)
    model.elements <- predict[,pos]
    
    model.data <- data.frame(response,predict)
    model <- lm(response~as.matrix(model.elements))
    v <- model$coefficients
    est <- as.matrix(complete_dropdates[d,pos]) %*% v[2:11] + v[1]
    estimate <- rbind(estimate,est)
    
  }
  
estimated_values<-data.frame(estimated_values,estimate)
  
}
estimated_values <- as.matrix(estimated_values)

#####

## LINEAR REGRESSION BY STEPWISE METHOD

## NOTE: NOT CHANGED FROM 12/12/2015

####

estimated_values_stepwise <- data.frame(matrix(nrow = (nrDays-100), ncol = 0))

for(j in 1:38){
  
  estimate <- data.frame()
  
  for(d in 101:nrDays){
    
    response <- complete_dropdates[,j]
    predict <- complete_dropdates[,]
    response <- response[(d-100):(d-1)]
    predict <- predict[(d-99):(d),]
    
    #compute correlations for the relevant time period 
    model.data <- data.frame(response, predict)
    backwards <- regsubsets(response~.,data=model.data,method= "forward", nvmax = 40)
    topten <- summary(backwards)$which[10,]
    model.elements <- predict[,topten[2:39]]
    
    model<-lm(response~as.matrix(model.elements))
    v <- model$coefficients
    est <- as.matrix(model.elements[100,]) %*% v[2:11] + v[1]
    estimate <- rbind(estimate,est)
  }
  
  estimated_values_stepwise <- data.frame(estimated_values_stepwise,estimate)
  
}



###################################

######## PCA #########

###################################

nrLags = 1
lookback = 100; # sliding window size in days
nrTickers <- ncol(windowdata)
knn_Pred<- NULL; lm_Pred <- NULL;
knn_Pred = array(0, dim = c(nrDays,nrTickers)); # Creating array of predicted values using K nearest neighbor
lm_Pred = array(0, dim = c(nrDays,nrTickers)); # Creating array of predicted values using linear regression

for(i in (lookback + nrLags) : (nrDays - nrLags)) {
  xtrain <- windowdata[ (i-lookback) : (i-1), ];
  xtest <- windowdata[ i, , drop=FALSE]
  
  both <- rbind(xtrain , xtest)
  
  ans <-run_PCA(both, 10) # perform PCA on the 101xnrFeatures matrix

  xtrain<-ans[1:lookback,]
  xtest<-ans[ (lookback + 1), ]
  
  for(j in 1:nrTickers){
    y_train = windowdata [ (i-lookback+1) : i,j]
    y_test = windowdata [i+1,j ]
    
    # k Nearest Neighbor section and entry into matrix
    
    y_hat = knn.reg(train = xtrain, test = xtest, y = y_train, k = 10);
    y_hat = y_hat$pred;
    
    knn_Pred[i,j] = y_hat
    
    # Linear Regression section and entry into matrix
    
    model<-lm(y_train~xtrain)
    v <- model$coefficients
    est <- xtest %*% v[2:11] + v[1]
    
    lm_Pred[i,j] = est
    
  }
}


#Get rid of zeroes at beginning of matrix
knn_Pred = knn_Pred[(lookback+1):(nrDays-1),]
lm_Pred = lm_Pred[(lookback+1):(nrDays-1),]

# Use the "which" function to find specific indices of columns with currency names

USD <- which (colnames(windowdata)=="USD")
BRL <- which (colnames(windowdata)=="BRL")
AUD <- which (colnames(windowdata)=="AUD")
RUB <- which (colnames(windowdata)=="RUB")
ARS <- which (colnames(windowdata)=="ARS")

# Test / First Scenario : USD

knnUSD <- knn_Pred[,USD]; lmUSD <- lm_Pred[,USD]; regUSD <- estimated_values[,USD]; stepUSD <-estimated_values_stepwise[,USD]; realUSD <- windowdata[(102:1185),USD]
regUSD<-regUSD[-1] # Question : regUSD has 1085 rows, whereas knn and lm have 1084. How do we subset for this?
stepUSD<-stepUSD[-1]
# Also: Is our USD subsetted correctly? It is currently only set to contain 1084 rows to behave well.

USDframe <- data.frame(knnUSD,lmUSD,regUSD,realUSD,stepUSD)
USDmatrix <- as.matrix(USDframe)

plot_cumsum(USDmatrix)
knnError <- realUSD - knnUSD
lmError <- realUSD - lmUSD
regError <- realUSD - regUSD
stepError <- realUSD - stepUSD

par(mfrow=c(2,1))
hist(knnError); hist(lmError); hist(regError); hist(stepError)
means <- c(mean(knnError),mean(lmError),mean(regError), mean(stepError))
medians <- c(median(knnError),median(lmError),median(regError),median(stepError))
barplot(means,names.arg=c("Knn PCA","LM PCA", "Corr LM", "Step LM"), main = "Mean Error")
barplot(medians,names.arg=c("Knn PCA", "LM PCA", "Corr LM", "Step LM"), main = "Median Error")


# Other 4 that we talked about. Can implement tomrrow.

knnBRL <- knn_Pred[,BRL]; lmBRL <- lm_Pred[,BRL]; regBRL <- estimated_values[,BRL]
knnAUD <- knn_Pred[,AUD; lmAUD <- lm_Pred[,AUD]; regAUD <- estimated_values[,AUD]
knnRUB <- knn_Pred[,RUB]; lmRUB <- lm_Pred[,RUB]; regRUB <- estimated_values[,RUB]
knnARS <- knn_Pred[,ARS]; lmARS <- lm_Pred[,ARS]; regARS <- estimated_values[,ARS]



plot_cumsum(matrix)




##################################

## FUNCTION TO COMPUTE PCA

##################################

run_PCA = function(X_train, nrFactors){
  
myPCA = prcomp(X_train, center = TRUE, scale. = TRUE, retx = TRUE);
pcaRot = myPCA$rotation
EIGS_PCA = myPCA$x

q = myPCA$sdev

FACTORS = EIGS_PCA[, 1:nrFactors];

  
return(FACTORS);
}

#########################

## plot_CUMSUM function

#########################

plot_cumsum = function(CUM_SUM_MTX){
  # INPUT: CUM_SUM_MTX, a matrix of size nrDays  x nrTickers 
  #   which plots the time series (one from each column) on the same plot.
  
  nrTickers = dim(CUM_SUM_MTX)[2];
  nrDays = dim(CUM_SUM_MTX)[1];
 myColors = c('black','red','blue', 'green','cyan')
  
  # pdf(file = 'cumulative_pnl_across_time.pdf', height = 12,  width = 8);
  # plot( CUM_SUM_MTX[ ,1], col = myColors[1], type ='l', pch=3, ylim = c(-2,6), lwd=2);
  plot (c(0, nrDays),c(90,115),type='n', xlab ='days', ylab = 'Prices') # sets the x and y axes scales
  for ( i in 1 : nrTickers){
    # plots the time series on the same graph
    lines( 1: nrDays, CUM_SUM_MTX[ ,i], col = myColors[i], lwd=2);  # , ylim = c(-1,1)
  }
  
  legend( 'topleft', legend = colnames(CUM_SUM_MTX), lty = 1, lwd = 2, col = myColors)
}
